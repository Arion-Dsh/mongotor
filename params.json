{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# What is MongoTor ?\r\n\r\n(MONGO + TORnado) is an asynchronous toolkit for accessing mongo with tornado.\r\n\r\n## Features\r\n\r\n* ORM like to map documents and fields\r\n* Advanced connection management (replica sets, slave okay)\r\n* Automatic reconnection\r\n* Connection pooling\r\n* Support for running database commands (find, find_one, count, sum, mapreduce etc...)\r\n* Signals for pre_save, post_save, pre_remove, post_remove, pre_update and post_update\r\n* 100% of code coverage by test\r\n\r\n## Why not pymongo ?\r\n\r\n[PyMongo](http://api.mongodb.org/python/current/) is a recommended way to work with MongoDB in python, but isn't asynchronous and not run inside de tornado's ioloop. If you use pymongo you won't take the advantages of tornado.\r\n\r\n## Why not asyncmongo ?\r\n\r\n[AsyncMongo](https://github.com/bitly/asyncmongo) is asynchronous library for accessing mongo with tornado.ioloop, but don't implement replica set, don't have an ORM, I don't like her connection pooling, is deficitary, and i don't trust in your tests. \r\n\r\nBesides, this project is not walking very well, or better, very fast. Exist a lot of issues and pull requests that aren't looked.\r\n\r\nI am very thankful to asyncmongo, i worked with he in some projects and he's been served as inspiration, but now, I am very excited to write my own library, more flexible, fast, secure and that will walking faster.\r\n\r\n## Installing\r\n\r\n    pip install mongotor\r\n\r\n## Using ORM\r\n\r\n    from mongotor.orm import Collection\r\n    from mongotor.orm.field import StringField, ObjectIdField, BooleanField, DateTimeField\r\n    from mongotor.database import Database\r\n\r\n    from datetime import datetime\r\n    import tornado.web\r\n    from tornado import gen\r\n\r\n    # A connection to the MongoDB database needs to be established before perform operations\r\n    # A connection is stabilished using a Databse object\r\n    Database.connect(['localhost:27017','localhost:27018'], 'asyncmongo_test')\r\n    \r\n    class User(Collection):\r\n\r\n        __collection__ = \"user\"\r\n\r\n        _id = ObjectIdField()\r\n        name = StringField()\r\n        active = BooleanField()\r\n        created = DateTimeField()\r\n\r\n    class Handler(tornado.web.RequestHandler):\r\n\r\n        @tornado.web.asynchronous\r\n        @gen.engine\r\n        def get(self):\r\n            user = User()\r\n            user.name = \"User name\"\r\n            user.active = True\r\n            user.created = datetime.now()\r\n\r\n            yield gen.Task(user.save)\r\n\r\n            # update date\r\n            user.name = \"New name\"\r\n            yield gen.Task(user.update)\r\n\r\n            # find one object\r\n            user_found = yield gen.Task(User.objects.find_one, user._id)\r\n\r\n            # find many objects\r\n            new_user = User()\r\n            new_user.name = \"new user name\"\r\n            new_user.user.active = True\r\n            new_user.created = datetime.now()\r\n\r\n            users_actives = yield gen.Task(User.objects.find, {'active': True})\r\n\r\n            users_actives[0].active = False\r\n            yield gen.Task(users_actives[0].save)\r\n\r\n            # remove object\r\n            yield gen.Task(user_found.remove)\r\n\r\n## Using Client\r\n\r\n    from mongotor.database import Database\r\n    from bson import ObjectId\r\n\r\n    class Handler(tornado.web.RequestHandler):\r\n\r\n        def initialize(self):\r\n            self.db = Database.connect(['localhost:27017','localhost:27018'], 'asyncmongo_test')\r\n\r\n        @tornado.web.asynchronous\r\n        @gen.engine\r\n        def get(self):\r\n            user = {'_id': ObjectId, 'name': 'User Name'}\r\n            yield gen.Task(self.db.user.insert, user)\r\n            \r\n            yield gen.Task(self.db.user.update, user['_id'], {\"$set\": {'name': 'New User Name'}})\r\n\r\n            user_found = yield gen.Task(self.db.user.find_one, user['_id'])\r\n            assert user_found['name'] == 'New User Name'\r\n\r\n            yield gen.Task(self.db.user.remove, user['_id'])\r\n\r\n## Contributing\r\n\r\nSend a pull request (preferred) or patches using ``git format-patch``. Please, write unit and/or functional tests for your new feature.\r\n\r\n## Issues\r\n\r\nPlease report any issues via [github issues](https://github.com/marcelnicolay/mongotor/issues)","name":"Mongotor","tagline":"An asynchronous driver and toolkit for accessing MongoDB with Tornado","google":""}